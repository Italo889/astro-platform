// Este é seu Datasource. Verifique se corresponde ao seu banco de dados (ex: postgresql, mysql).
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// O gerador para o Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// Modelo para os Usuários da plataforma.
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String   // No futuro, guardaremos o hash da senha aqui.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Sistema de Badges
  isBetaTester Boolean @default(false)
  betaTesterNumber Int? // Número do beta tester (1, 2, 3... até 20)
  badges Json? // Array de badges que o usuário possui
  
  // Relação: Um usuário pode ter muitos relatórios.
  reports   Report[]
  
  // Relação: Um usuário pode ter criado muitos changelogs (apenas admins)
  changelogs Changelog[]
}

// Modelo para os Relatórios Pessoais gerados.
model Report {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  
  // Usamos o tipo `Json` para guardar o objeto complexo do relatório.
  // Isso nos dá flexibilidade máxima para evoluir o formato do relatório no futuro.
  content   Json
  
  // Relação: Cada relatório pertence a um usuário.
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
}

// Adicione este modelo ao seu schema.prisma

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model City {
  id        Int     @id @default(autoincrement()) // ID interno do nosso banco
  geonameId Int     @unique // ID original do GeoNames
  name      String  // Nome principal (UTF-8)
  asciiName String  @db.Text // Nome sem acentos, ideal para buscas
  latitude  Float
  longitude Float
  countryCode String  @db.VarChar(2)
  admin1Code  String? @db.VarChar(20) // Código do estado (ex: RJ, SP)
  population  BigInt

  @@index([asciiName])
}

// Modelo para Changelog/Release Notes
model Changelog {
  id          String   @id @default(uuid())
  version     String   @unique // ex: "1.2.0", "1.2.1"
  title       String   // ex: "Novos Gráficos no Dashboard Admin"
  description String?  @db.Text // Descrição detalhada opcional
  releaseDate DateTime @default(now())
  isPublished Boolean  @default(false)
  
  // Categorias das mudanças
  changes     Json     // Array de objetos: [{ type: "feature|fix|improvement", description: "...", icon: "✨" }]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Autor (referência ao admin que criou)
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([releaseDate])
  @@index([isPublished])
}